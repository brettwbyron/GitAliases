@use "sass:math"; 
@use "sass:meta";
@use "sass:list";
@use "sass:map";
@use "Library/settings/variables"as *;
$mobile: false !default;
// --------------------------------------------------------------------------
//  =Mixins
// --------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Banners - fixed | scaling
// -----------------------------------------------------------------------------

// Fixed size banner - Use srcset to target screen size or resolution.
// (https://www.sitepoint.com/how-to-build-responsive-images-with-srcset/)
// -----------------------------------------------------------------------------
// $w (width): <pixels>
//
// <div id="banner" class="banner">
//     <img src="//careers.jobvite.com/path-to-customer-folder/banner.jpg" />
// </div>
@mixin banner-fixed($w:1200px, $h:500px) {
    @if type-of($w) !=number {
        @error "The value of $w:#{$w} must be in pixels.";
    }
    @if $h !=null and type-of($h) !=number {
        @error "The value of $h:#{$h} must be in pixels.";
    }

    .banner {
        margin: 0;
        padding: 0;
        width: 100%;
        position: relative;

        img {
            max-width: $w;
            @if $mobile {
                height: $h-m;
            } @else {
                height: $h;
            } //End
        }

        @content;
    }
}

// Tiny Slider banner
// -----------------------------------------------------------------------------
// $max (max-height): <pixels> | min (min-height): <pixels>
// $imgH (image height): <pixels> | $imgW (image width): <pixels>
// $imgName (image name): <string>
// $pos (position): <any value accepted by background-position
//
// EX:
// <div id="banner" class="banner banner-home">
//     <div class="slides">
//         <div class="slide slide-1"></div>
//         <div class="slide slide-2"></div>
//         <div class="slide slide-3"></div>
//     </div>
//     <div class="overlay flex-col flex-m-center">
//         <div class="jv-wrapper flex-col flex-m-center flex-c-center">
//             <h1>Join our team</h1>
//         </div>
//     </div>
// </div>

@mixin banner($selector:'.banner') {
    #{$selector} {
        width: 100%;
        position: relative;

        @content;
    }
}

// $m-x: mobile image factor, applies a multiplier to mobile height for landscape view
// $suffix (boolean): for mobile image suffix set in variables, default is '@0.5x'
// $imgName: name of banner image including file extension ex: banner-home.jpg
// $count: number of banner images
@mixin bannerImage($imgH, $imgW, $h:null, $min:null, $max:null, $mobile:false, $m-x:1.5, $pos:50% 50%, $size:cover, $repeat:no-repeat, $suffix:false, $imgName, $count) {
    @if $h !=null and type-of($h) !=number and not str-index($h, 'vh') and not str-index($h, "%") and $h !='auto' {
        @error "The value of $h:#{$h} must be in pixels, vh, or %.";
    }

    @if $min !=null and type-of($min) !=number and not str-index($min, 'vh') and not str-index($min, "%") {
        @error "The value of $min:#{$min} must be in pixels, vh, or %.";
    }

    @if $max !=null and type-of($max) !=number and not str-index($max, 'vh') and not str-index($max, "%") {
        @error "The value of $max:#{$max} must be in pixels, vh, or %.";
    }

    @if type-of($imgH) !=number {
        @error "The image height value of $imgH:#{$imgH} must be in pixels.";
    }

    @if type-of($imgW) !=number {
        @error "The image width value of $imgW:#{$imgW} must be in pixels.";
    }

    @if $count == null or type-of($count) !=number or $count == 0 {
        @error "The value of $count:#{$count} must be greater than 0";
    }

    // Slideshow images for banner    
    @if $count > 1 {
        height: $h;
        @if $mobile {    
            @media screen and (orientation:landscape) {
                height: $h * $m-x;
            }
        }
        min-height: $min;
        max-height: $max;
    
        &:before {
            display: block;
            content: '';
            padding-bottom: math.div($imgH,$imgW) * 100%;
        }
    
        .slides {
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            margin: 0;
            padding: 0;
            list-style: none;
            padding-left: 0;
            overflow: hidden;
    
            .slide {
                height: inherit;
                opacity: 0;
    
                &.tns-slide-active {
                    opacity: 1;
                }
            }
    
            .tns-item {
                position: absolute;
                width: 100%;
                height: 100%;
                top: 0;
                left: 0;
                z-index: 0;
                background-position: $pos;
                background-size: $size;
                background-repeat: $repeat;
            }
        }
    
        // Slide images
        @for $i from 1 through $count {
            $index: str-index($imgName,'.');
            $selector: str-slice($imgName,1,($index - 1));
    
            &.#{$selector} {
                @if $suffix {
                    $output: str-insert($imgName, "-#{$i}#{$img-suffix}", $index);
    
                    .slide-#{$i} {
                        background-image: url($root-url+$output);
                    }
                } @else {
                    $output: str-insert($imgName, "-#{$i}", $index);
    
                    .slide-#{$i} {
                        background-image: url($root-url+$output);
                    }
                }
            }
        }
    // Single image for banner    
    } @else if $count == 1 {
        $index: str-index($imgName, '.');
        $selector: str-slice($imgName, 1, ($index - 1));

        &.#{$selector} {
            &:before {
                display: block;
                content: '';
                padding-bottom: math.div($imgH, $imgW) * 100%;
            }

            .banner-image {
                height: clamp(#{$min}, #{$h}, #{$max});
                @if $mobile {

                    @media screen and (orientation:landscape) {
                        height: $h * $m-x;
                    }
                } @else {

                    @media all and (-ms-high-contrast: none),
                    (-ms-high-contrast: active) {
                        height: $h;
                        min-height: $min;
                        max-height: $max;
                    }

                } //End
                @if $suffix {
                    $output: str-insert($imgName, "#{$img-suffix}", $index);

                    background-image: url($root-url+$output);
                } @else {
                    background-image: url($root-url+$imgName);
                }
                background-position: $pos;
                background-size: $size;
                background-repeat: $repeat;
            }
        }
    }

    @content;
}

// -----------------------------------------------------------------------------
// Background Image
// -----------------------------------------------------------------------------
@mixin bg-img($img:null, $suffix:false, $pos:50% 50%, $size:cover, $repeat:no-repeat) {
    @if $suffix {
        $index: str-index($img, '.');
        $output: str-insert($img, $img-suffix, $index);
        background-image: url($root-url+$output);
    } @else {
        background-image: url($root-url+$img);
    }

    background-position: $pos;
    background-size: $size;
    background-repeat: $repeat;
}

// -----------------------------------------------------------------------------
// WebP Image
// -----------------------------------------------------------------------------
@mixin webp-bg($img, $suffix:false) {
    .webp & {
        @if $suffix {
            $index: str-index($img, '.');
            $output: str-insert($img, $img-suffix, $index);
            background-image: url($root-url+$output);
        } @else {
            background-image: url($root-url+$img);
        }
    }
}

// -----------------------------------------------------------------------------
// Gradients
// -----------------------------------------------------------------------------

// Linear gradient - $list: <gradient colors>
@mixin gradient($direction, $list) {
    background: linear-gradient($direction, $list);
}

// Radial gradient - $list: <gradient colors>
@mixin radial-gradient($list) {
    background: radial-gradient(circle closest-side, $list);
}

// -----------------------------------------------------------------------------
// Truncating single line of text only
// -----------------------------------------------------------------------------

// Width $w <integer>
@mixin truncate($w: 100px) {
    display: inline-block;
    max-width: $w;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

@mixin truncate-none() {
    max-width: none;
    overflow: auto;
    text-overflow: initial;
    width: auto;
}

// -----------------------------------------------------------------------------
// Truncating Multiple Line Text
// Make sure there is no height set after this mixin
// -----------------------------------------------------------------------------

// $f (font): <integer> | $l-h: decimal | $lines:
@mixin truncate-multiline($f:14, $l-h:1.2, $lines:3) {
    display: block;
    /* Fallback for non-webkit */
    display: -webkit-box;
    max-height: ($f * $l-h * $lines) + px; // Fallback for non-webkit
    margin: 0;
    font-size: $f + px;
    line-height: $l-h;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
    overflow: -moz-scrollbars-vertical; // Fallback for Mozilla browsers
    text-overflow: ellipsis;
    white-space: pre-wrap;
}

// -----------------------------------------------------------------------------
// Prevent/Limit Selection
// -----------------------------------------------------------------------------
// $user-select: none | text | all | element(IE)
// https://developer.mozilla.org/en-US/docs/Web/CSS/user-select
@mixin user-select($user-select) {
    user-select: $user-select;
}

// -----------------------------------------------------------------------------
// =Sizing =Size shortcuts
// -----------------------------------------------------------------------------
// $w: <integer>, $h: <integer>
// Positive and negative accepted
@mixin size($w:5px, $h:5px) {
    height: $h;
    width: $w;
}

// $s: <integer>
// Positive and negative accepted
@mixin square($s:5px) {
    @include size($s, $s);
}

//------------------------------------------------------------------------------
// Shadows
//------------------------------------------------------------------------------

// $x: <integer>, $y: <integer>, $blur: <integer>, $spread: <integer>, $alpha: <decimal number 0-1>
@mixin box-shadow-adv($x: 0, $y: 1, $blur: 2, $spread: 0, $alpha: 0.25) {
    $val: ($x + px) ($y + px) ($blur + px) ($spread + px) rgba(0, 0, 0, $alpha);
    box-shadow: $val;
}

// $x: <integer>, $y: <integer>, $blur: <integer>, $spread: <integer>, $alpha: <decimal number 0-1>
// .inner-shadow(0; 1; 1; 1; 0.25)
@mixin inner-shadow($x: 0, $y: 1, $blur: 2, $spread: 0, $r: 0, $g: 0, $b: 0, $alpha: 0.25) {
    $val: inset ($x + px) ($y + px) ($blur + px) ($spread + px) rgba($r, $g, $b, $alpha);
    box-shadow: $val;
}

@mixin no-shadow() {
    box-shadow: none;
}

//------------------------------------------------------------------------------
// =border radius
//------------------------------------------------------------------------------

// $t,$r,$b,$l: <integer>
@mixin border-radius-custom($t, $r, $b, $l) {
    $val: $t $r $b $l;
    border-radius: $val;
}

// $rounded: <integer>
@mixin border-radius-top($rounded) {
    $val: $rounded $rounded 0 0;
    border-radius: $val;
}

// $rounded: <integer>
@mixin border-radius-bottom($rounded) {
    $val: 0 0 $rounded $rounded;
    border-radius: $val;
}

// $rounded: <integer>
@mixin border-radius-left($rounded) {
    $val: $rounded 0 0 $rounded;
    border-radius: $val;
}

// $rounded: <integer>
@mixin border-radius-right($rounded) {
    $val: 0 $rounded $rounded 0;
    border-radius: $val;
}

// -----------------------------------------------------------------------------
// =Transition
// -----------------------------------------------------------------------------
@mixin transition($property:all, $duration:0.3s, $ease:ease-in-out) {
    transition: $property $duration $ease;
}

// -----------------------------------------------------------------------------
// =Scrolling
// -----------------------------------------------------------------------------
@mixin scroller-y() {
    overflow-y: auto;
    overflow-x: hidden;
}

@mixin scroller() {
    overflow-y: auto;
    overflow-x: auto;
}

// -----------------------------------------------------------------------------
// =Width and =Height - thanks Brett for helping me ;)
// -----------------------------------------------------------------------------
@mixin generate-width($start:0, $end:100, $inc:5, $suffix:null) {
    @for $i from $start through $end {
        @if ($i % $inc==0) {
            .w-#{$i}#{$suffix} {
                width: $i * 1%;
            }
        }
    }
}

@mixin generate-height($start:0, $end:100, $inc:5, $suffix:null) {
    @for $i from $start through $end {
        @if ($i % $inc==0) {
            .h-#{$i}#{$suffix} {
                height: $i * 1%;
            }
        }
    }
}
// -----------------------------------------------------------------------------
// =CSS Grid
// -----------------------------------------------------------------------------

@mixin ie-grid-item($row, $row-span:1, $col, $col-span:1, $area:null) {
    -ms-grid-row: $row;
    -ms-grid-row-span: $row-span;

    @if ($row-span > 1) {
        grid-row: $row / span $row-span;
    } @else {
        grid-row: $row;
    }

    -ms-grid-column: $col;
    -ms-grid-column-span: $col-span;

    @if ($col-span > 1) {
        grid-column: $col / span $col-span;
    } @else {
        grid-column: $col;
    }
    grid-area: $area;
}

// -----------------------------------------------------------------------------
// =Position
// -----------------------------------------------------------------------------
@mixin absolute($top:null, $right:null, $bottom:null, $left:null) {
    position: absolute;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
}

@mixin relative($top:null, $right:null, $bottom:null, $left:null) {
    position: relative;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
}

// ----
// libsass (v3.3.6)
// ----

// =========================================================================
//
//  PRECISE CONTROL OVER RESPONSIVE TYPOGRAPHY FOR SASS
//  ---------------------------------------------------
//  Indrek Paas @indrekpaas
//
//  Inspired by Mike Riethmuller's Precise control over responsive typography
//  http://madebymike.com.au/writing/precise-control-responsive-typography/
//
//  `strip-unit()` function by Hugo Giraudel
//
//  11.08.2016 Remove redundant `&` self-reference
//  31.03.2016 Remove redundant parenthesis from output
//  02.10.2015 Add support for multiple properties
//  24.04.2015 Initial release
//
// =========================================================================

@function strip-unit($value) {
    @return $value / ($value * 0 + 1);
}

@mixin fluid-type($properties, $min-vw, $max-vw, $min-value, $max-value) {
    @each $property in $properties {
        #{$property}: $min-value;
    }

    @media screen and (min-width: $min-vw) {
        @each $property in $properties {
            #{$property}: math.div(calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw})), (#{strip-unit($max-vw - $min-vw)}));
        }
    }

    @media screen and (min-width: $max-vw) {
        @each $property in $properties {
            #{$property}: $max-value;
        }
    }
}

// Usage:
// ======

// /* Single property */
// html {
//   @include fluid-type(font-size, 320px, 1366px, 14px, 18px);
// }

// /* Multiple properties with same values */
// h1 {
//   @include fluid-type(padding-bottom padding-top, 20em, 70em, 2em, 4em);
// }

////////////////////////////////////////////////////////////////////////////


// Set variable for desktop and mobile
// Ex: $variable: set-var(380px,380px);
@function set-var($m, $d) {
    @if $mobile {
        @return $m;
    } @else {
        @return $d;
    }
}