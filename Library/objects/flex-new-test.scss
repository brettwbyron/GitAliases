@use "sass:map";
@use "Library/settings/variables"as *;
@use "Library/tools/mixins"as *;
@use "Library/tools/flex"as *;
$mobile: false !default;
$internal: false !default;

// -----------------------------------------------------------------------------
/*!  =Flex New */
// -----------------------------------------------------------------------------
// m = main axis
// w = wrap or space along cross axis
// c = cross axis alignment
// self = align-self

$fx-class: flex;

.flex {
    display: flex;
    min-width: 0;
    min-height: 0;
}
.flex-inline { display: inline-flex }

.flex-auto     { flex: 1 1 auto } // grow and shrink
.flex-grow     { flex: 1 0 auto } // grow only
.flex-shrink   { flex: 0 1 auto } // shrink only
.flex-static   { flex: 0 0 auto } // won't grow or shrink
.flex-none     { flex: none }

.flex-first { order: -1 }
.flex-last  { order: 99999 }

// -----------------------------------------------------------------------------
// This defines the main axis
.flex-row,
.flex-col,
.flex-col-reverse,
.flex-row-reverse {
    @extend .flex;
}
.flex-col  { flex-direction: column }
.flex-row  { flex-direction: row }
.flex-col-reverse  { flex-direction: column-reverse }
.flex-row-reverse  { flex-direction: row-reverse }

.flex-wrap            { flex-wrap: wrap }
.flex-nowrap          { flex-wrap: nowrap }
.flex-wrap-reverse    { flex-wrap: wrap-reverse; }

/*! Generate flex classes */
$fx-classes: (
    main: (
        namespace: m,
        property: justify-content,
        classes: (
            start: flex-start,
            space-around: space-around,
            space-between: space-between,
            space-evenly: space-evenly,
            end: end,
            center: center
        )
    ),
    wrap: (
        namespace: w,
        property: align-content,
        classes: (
            stretch: stretch,
            center: center,
            start: flex-start,
            end: flex-end,
            space-around: space-around,
            space-between: space-between
        )
    ),
    cross: (
        namespace: c,
        property: align-items,
        classes: (
            center: center,
            baseline: baseline,
            stretch: stretch,
            start: flex-start,
            end: flex-end
        )
    ),
    self: (
        namespace: self,
        property: align-self,
        classes: (
            start: flex-start,
            end: flex-end,
            center: center,
            stretch: stretch,
            baseline: baseline,
            auto: auto
        )
    )
);

@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}

@mixin flex-base($namespace, $property, $name, $value, $suffix:null) {
    .flex-#{$namespace}-#{$name}#{$suffix} {
        #{$property}: #{$value};
    }
}
@mixin flex-classes($suffix:null) {
    
    @each $key in $fx-classes {
        $namespace: nth($key,1);
        ///$namespace: map-deep-get($fx-classes, $key, "namespace");
        $property: map-deep-get($fx-classes, $key, "property");
        $classes: map-deep-get($fx-classes, $key, "classes");
        @debug "namespace: #{$namespace}";
        @debug "property: #{$property}";
        @debug "key: #{$key}";
        @each $key, $val in $classes {
            //@debug "val: #{$val}";
            @debug "key: #{$key}";
            //@debug "name: #{$key}";
            //@debug "value: #{$val}";
            //@debug "suffix: #{$suffix}";
            @include flex-base($namespace, $property, $key, $val, $suffix);
        }
    }
}

@include flex-classes();
// Conditions
@supports (-ms-accelerator: true) {

    /* Edge only - source: https://dev.to/mornir/flexbox-space-evenly-value-58gf */
    .flex-m-space-evenly {
        justify-content: space-around;
        /* you can also add some other adjustments to size, margins etc to get the same positioning */
    }
}
//@include flex-classes(wrap);
//@include flex-classes(cross);
//@include flex-classes(self);

//.flex-center {
//    @extend .flex-m-center;
//    @extend .flex-c-center;
//}

@if $area-flex-order {
    @for $i from 1 through $max-pos {
        .pos-#{$i} {
            @include flex-order($i);
        }
    }
}
// Responsive layout
// -----------------------------------------------------------------------------
@if not $mobile {
    @if $area-screen-x-small {
        /*! max-width: #{$screen-sm-px} */
        @media all and (max-width: $screen-sm-em) {
            $suffix: "-xs";
            
        }
    }
    @if $area-screen-small {
        /*! min-width: #{$screen-sm-px} */
        @media all and (min-width: $screen-sm-em) {
            @include flex-classes("-sm");
        }
    }
    @if $area-screen-medium {
        /*! min-width: #{$screen-md-px} */
        @media all and (min-width: $screen-md-em) {
            @include flex-classes("-md");
        }
    }
    @if $area-screen-large {
        /*! min-width: #{$screen-lg-px} */
        @media all and (min-width: $screen-lg-em) {
            @include flex-classes("-lg");
        }
    }
    @if $area-screen-xl {
        /*! min-width: #{$screen-xl-px} */
        @media all and (min-width: $screen-xl-em) {
            @include flex-classes("-xl");
        }
    }
}

/*!  End - Flex New */