@use "sass:math";
@use "sass:map";
@use "Library/settings/variables"as *;
@use "Library/tools/mixins"as *;
@use "Library/tools/flex"as *;
$mobile: false !default;
$internal: false !default;

// -----------------------------------------------------------------------------
/*!  =Flex Classes */
// -----------------------------------------------------------------------------
// m = main axis
// w = wrap or space along cross axis
// c = cross axis alignment
// self = align-self

$fx-class: flex;

.flex {
    display: flex;
    min-width: 0;
    min-height: 0;
}
.flex-inline { display: inline-flex }

.flex-auto     { flex: 1 1 auto } // grow and shrink
.flex-grow     { flex: 1 0 auto } // grow only
.flex-shrink   { flex: 0 1 auto } // shrink only
.flex-static   { flex: 0 0 auto } // won't grow or shrink
.flex-none     { flex: none }

.flex-first { order: -1 }
.flex-last  { order: 99999 }

// -----------------------------------------------------------------------------
// This defines the main axis
.flex-row,
.flex-col,
.flex-col-reverse,
.flex-row-reverse {
    @extend .flex;
}
.flex-col  { flex-direction: column }
.flex-row  { flex-direction: row }
.flex-col-reverse  { flex-direction: column-reverse }
.flex-row-reverse  { flex-direction: row-reverse }

.flex-wrap            { flex-wrap: wrap }
.flex-nowrap          { flex-wrap: nowrap }
.flex-wrap-reverse    { flex-wrap: wrap-reverse; }

/* Generate flex classes */
$main: (
    start: flex-start,
    space-around: space-around,
    space-between: space-between,
    space-evenly: space-evenly,
    end: flex-end,
    center: center
);
$wrap: (
    stretch: stretch,
    center: center,
    start: flex-start,
    end: flex-end,
    space-around: space-around,
    space-between: space-between
);
$cross: (
    center: center,
    baseline: baseline,
    stretch: stretch,
    start: flex-start,
    end: flex-end
);
$self: (
    start: flex-start,
    end: flex-end,
    center: center,
    stretch: stretch,
    baseline: baseline,
    auto: auto
);

@mixin flex-foundation($suffix) {
    .flex-row#{$suffix},
    .flex-col#{$suffix},
    .flex-col-reverse#{$suffix},
    .flex-row-reverse#{$suffix} {
        display: flex;
        min-width: 0;
        min-height: 0;
    }
    .flex#{$suffix} { display: flex }
    .flex-inline#{$suffix} { display: inline-flex }
    .flex-col#{$suffix}  { flex-direction: column }
    .flex-row#{$suffix}  { flex-direction: row }
    .flex-col-reverse#{$suffix}  { flex-direction: column-reverse }
    .flex-row-reverse#{$suffix}  { flex-direction: row-reverse }
}
@mixin flex-base($namespace, $property, $name, $value, $suffix:null) {
    .flex-#{$namespace}-#{$name}#{$suffix} {
        #{$property}: #{$value};
    }
}
@mixin flex-classes($config, $suffix:null) {
    $property: null;
    $namespace: null;

    @if $config == main {
        $namespace: m;
        $property: justify-content;
        @each $name, $value in $main {
           @include flex-base($namespace, $property, $name, $value, $suffix);
        }
    } @else if $config == wrap {
        $namespace: w;
        $property: align-content;
        @each $name, $value in $wrap {
            @include flex-base($namespace, $property, $name, $value, $suffix);
        }
    } @else if $config == cross {
        $namespace: c;
        $property: align-items;
        @each $name, $value in $cross {
            @include flex-base($namespace, $property, $name, $value, $suffix);
        }
    } @else if $config == self {
        $namespace: self;
        $property: align-self;
        @each $name, $value in $self {
            @include flex-base($namespace, $property, $name, $value, $suffix);
        }
    } @else {
        @debug "Error with flex properties";
    }
}

@include flex-classes(main);
// Conditions
@supports (-ms-accelerator: true) {
    /* Edge only - source: https://dev.to/mornir/flexbox-space-evenly-value-58gf */
    .flex-m-space-evenly {
        justify-content: space-around;
        /* you can also add some other adjustments to size, margins etc to get the same positioning */
    }
}
@include flex-classes(wrap);
@include flex-classes(cross);
@include flex-classes(self);

.flex-center {
    @extend .flex-m-center;
    @extend .flex-c-center;
}

@if $area-flex-order {
    @for $i from 1 through $max-pos {
        .pos-#{$i} {
            @include flex-order($i);
        }
    }
}
// Responsive layout
// -----------------------------------------------------------------------------
@if not $mobile {
    @if $area-screen-x-small {
        /*! max-width: #{$screen-sm-px} */
        @media all and (max-width: $screen-sm-em) {
            $suffix: "-xs";
            @include flex-foundation($suffix);
            @include flex-classes(main, $suffix);
            // Conditions
            @supports (-ms-accelerator: true) {

                /* Edge only - source: https://dev.to/mornir/flexbox-space-evenly-value-58gf */
                .flex-m-space-evenly#{$suffix} {
                    justify-content: space-around;
                    /* you can also add some other adjustments to size, margins etc to get the same positioning */
                }
            }
            @include flex-classes(wrap, $suffix);
            @include flex-classes(cross, $suffix);
            @include flex-classes(self, $suffix);
        }
    }
    @if $area-screen-small {
        /*! min-width: #{$screen-sm-px} */
        @media all and (min-width: $screen-sm-em) {
            $suffix: "-sm";
            @include flex-foundation($suffix);
            @include flex-classes(main, $suffix);

            // Conditions
            @supports (-ms-accelerator: true) {
                /* Edge only - source: https://dev.to/mornir/flexbox-space-evenly-value-58gf */
                .flex-m-space-evenly#{$suffix} {
                    justify-content: space-around;
                    /* you can also add some other adjustments to size, margins etc to get the same positioning */
                }
            }
            @include flex-classes(wrap, $suffix);
            @include flex-classes(cross, $suffix);
            @include flex-classes(self, $suffix);

            @if $area-flex-order {
                @for $i from 1 through $max-pos {
                    .pos-#{$i}#{$suffix} {
                        @include flex-order($i);
                    }
                }
            }
        }
    }
    @if $area-screen-medium {
        /*! min-width: #{$screen-md-px} */
        @media all and (min-width: $screen-md-em) {
            $suffix: "-md";
            @include flex-foundation($suffix);
            @include flex-classes(main, $suffix);

            // Conditions
            @supports (-ms-accelerator: true) {
                /* Edge only - source: https://dev.to/mornir/flexbox-space-evenly-value-58gf */
                .flex-m-space-evenly#{$suffix} {
                    justify-content: space-around;
                    /* you can also add some other adjustments to size, margins etc to get the same positioning */
                }
            }
            @include flex-classes(wrap, $suffix);
            @include flex-classes(cross, $suffix);
            @include flex-classes(self, $suffix);

            @if $area-flex-order {
                @for $i from 1 through $max-pos {
                    .pos-#{$i}#{$suffix} {
                        @include flex-order($i);
                    }
                }
            }
        }
    }
    @if $area-screen-large {
        /*! min-width: #{$screen-lg-px} */
        @media all and (min-width: $screen-lg-em) {
            $suffix: "-lg";
            @include flex-foundation($suffix);
            @include flex-classes(main, $suffix);
            // Conditions
            @supports (-ms-accelerator: true) {
                /* Edge only - source: https://dev.to/mornir/flexbox-space-evenly-value-58gf */
                .flex-m-space-evenly#{$suffix} {
                    justify-content: space-around;
                    /* you can also add some other adjustments to size, margins etc to get the same positioning */
                }
            }
            @include flex-classes(wrap, $suffix);
            @include flex-classes(cross, $suffix);
            @include flex-classes(self, $suffix);

            @if $area-flex-order {
                @for $i from 1 through $max-pos {
                    .pos-#{$i}#{$suffix} {
                        @include flex-order($i);
                    }
                }
            }
        }
    }
    @if $area-screen-xl {
        /*! min-width: #{$screen-xl-px} */
        @media all and (min-width: $screen-xl-em) {
            $suffix: "-xl";
            @include flex-foundation($suffix);
            @include flex-classes(main, $suffix);
            // Conditions
            @supports (-ms-accelerator: true) {
                /* Edge only - source: https://dev.to/mornir/flexbox-space-evenly-value-58gf */
                .flex-m-space-evenly#{$suffix} {
                    justify-content: space-around;
                    /* you can also add some other adjustments to size, margins etc to get the same positioning */
                }
            }
            @include flex-classes(wrap, $suffix);
            @include flex-classes(cross, $suffix);
            @include flex-classes(self, $suffix);

            @if $area-flex-order {
                @for $i from 1 through $max-pos {
                    .pos-#{$i}#{$suffix} {
                        @include flex-order($i);
                    }
                }
            }
        }
    }
}

/*  End - Flex */